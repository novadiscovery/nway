// -----------------------------------------------------------------------------
// Copyright Â© 2011-2012 Novadiscovery. All Rights Reserved.
// -----------------------------------------------------------------------------

var buildTree = (process.env.TEST_COV ? require('../../lib-cov/buildTree') : require('../../lib/buildTree'))
  , Module    = (process.env.TEST_COV ? require('../../lib-cov/Module') : require('../../lib/Module'))
  , DepNode   = (process.env.TEST_COV ? require('../../lib-cov/DepNode') : require('../../lib/DepNode'))
;


// IMPORTS
var should  = require('should')
  , _       = require('underscore')
  , options = require('../support/options')
;
require('colors');


describe('buildTree()', function(){
	it('should generate an optimized tree based on a modules list', function(){
		// Create a fake module list (as generated by the parser)
		var modules = [
			 new Module({uid:'a', req: [{uid: 'b', async: false }]})
			,new Module({uid:'b', req: [{uid: 'c', async: true }]})
			,new Module({uid:'c', req: []})
		];
		var tree = buildTree (options, modules);

		// Is a DepNode :
		tree.should.be.instanceof(DepNode);

		// With two packet (one link is async) :
		tree.getAllBundles().length.should.equal(2);

		// With 3 modules  :
		tree.getAllModules().length.should.equal(3);
	});

	it('should generate an optimized tree', function(){
		// Create a fake module list (as generated by the parser)
		var modules = [
			 new Module({uid:'a', req: [{uid: 'b', async: false }, {uid: 'c', async: false }]})
			,new Module({uid:'b', req: [{uid: 'c', async: true }]})
			,new Module({uid:'c', req: []})
		];
		var tree = buildTree (options, modules, true);

		// Is a DepNode :
		tree.should.be.instanceof(DepNode);

		// With two packet (one link is async but requested sync by a) :
		tree.getAllBundles().length.should.equal(1);

		// With 3 modules  :
		tree.getAllModules().length.should.equal(3);

	});
})